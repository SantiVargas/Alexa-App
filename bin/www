#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('alexa:server');
var http = require('http');
var localtunnel = require('localtunnel');

var server = http.createServer(app);
var input_port = process.env.PORT || '3000';


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var tunnel_opts = {
  subdomain: 'ltfxwxflbe'
};
var tunnel = localtunnel(input_port, tunnel_opts, function(err, tunnel) {
  if (err) {
    console.error('Error setting up tunnel', err);
    throw err;
  }

  console.log('Tunneled on', tunnel.url);
  var port = normalizePort(input_port);
  app.set('port', port);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  console.log('Server listening on', port);

});

tunnel.on('close', function() {
  debug('Tunnel closed');
  server.close(function() {
    debug('Server closed due to tunnel closure');
  });
});
